{"version":3,"sources":["../../../../lib/regexr/profile/core.js"],"names":["y","n","core","id","flags","g","i","m","s","u","x","U","escChars","split","reduce","o","c","badEscChars","escCharCodes","a","t","v","f","r","e","escCharTypes","A","b","B","d","D","G","h","H","K","N","R","S","V","w","W","X","Z","z","charTypes","$","unquantifiable","quant","plus","star","opt","lazy","possessive","eof","bof","eos","abseos","alt","open","mode","comment","condition","unicodeScripts","Arabic","Armenian","Avestan","Balinese","Bamum","Bassa_Vah","Batak","Bengali","Bopomofo","Brahmi","Braille","Buginese","Buhid","Canadian_Aboriginal","Carian","Caucasian_Albanian","Chakma","Cham","Cherokee","Common","Coptic","Cuneiform","Cypriot","Cyrillic","Deseret","Devanagari","Duployan","Egyptian_Hieroglyphs","Elbasan","Ethiopic","Georgian","Glagolitic","Gothic","Grantha","Greek","Gujarati","Gurmukhi","Han","Hangul","Hanunoo","Hebrew","Hiragana","Imperial_Aramaic","Inherited","Inscriptional_Pahlavi","Inscriptional_Parthian","Javanese","Kaithi","Kannada","Katakana","Kayah_Li","Kharoshthi","Khmer","Khojki","Khudawadi","Lao","Latin","Lepcha","Limbu","Linear_A","Linear_B","Lisu","Lycian","Lydian","Mahajani","Malayalam","Mandaic","Manichaean","Meetei_Mayek","Mende_Kikakui","Meroitic_Cursive","Meroitic_Hieroglyphs","Miao","Modi","Mongolian","Mro","Myanmar","Nabataean","New_Tai_Lue","Nko","Ogham","Ol_Chiki","Old_Italic","Old_North_Arabian","Old_Permic","Old_Persian","Old_South_Arabian","Old_Turkic","Oriya","Osmanya","Pahawh_Hmong","Palmyrene","Pau_Cin_Hau","Phags_Pa","Phoenician","Psalter_Pahlavi","Rejang","Runic","Samaritan","Saurashtra","Sharada","Shavian","Siddham","Sinhala","Sora_Sompeng","Sundanese","Syloti_Nagri","Syriac","Tagalog","Tagbanwa","Tai_Le","Tai_Tham","Tai_Viet","Takri","Tamil","Telugu","Thaana","Thai","Tibetan","Tifinagh","Tirhuta","Ugaritic","Vai","Warang_Citi","Yi","unicodeCategories","C","Cc","Cf","Cn","Co","Cs","L","Ll","Lm","Lo","Lt","Lu","M","Mc","Me","Mn","Nd","Nl","No","P","Pc","Pd","Pe","Pf","Pi","Po","Ps","Sc","Sk","Sm","So","Zl","Zp","Zs","posixCharClasses","alnum","alpha","ascii","blank","cntrl","digit","graph","lower","print","punct","space","upper","word","xdigit","modes","J","tokens","close","char","set","setnot","setclose","range","unicodecat","notunicodecat","unicodescript","notunicodescript","posixcharclass","escoctal","escunicodeu","escunicodeub","escunicodexb","escsequence","eschexadecimal","esccontrolchar","escoctalo","escchar","group","groupclose","noncapgroup","namedgroup","atomic","define","branchreset","poslookbehind","neglookbehind","poslookahead","neglookahead","namedref","numref","extnumref","recursion","numsubroutine","namedsubroutine","conditional","conditionalelse","conditionalgroup","matchanyset","substTokens","subst_$esc","subst_$before","subst_$after","subst_$group","subst_$bgroup","subst_bsgroup","subst_group","subst_0match","subst_esc","config","forwardref","nestedref","ctrlcodeerr","reftooctalalways","substdecomposeref","looseesc","unicodenegated","namedgroupalt","docs","module","exports"],"mappings":"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","sourcesContent":["/*\nRegExr: Learn, Build, & Test RegEx\nCopyright (C) 2017  gskinner.com, inc.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\nThe core profile essentially defines every feature we support, and is then pared down by other profiles. All values should be y (true).\n\nIt also acts in part as pseudo documentation for all of the \"type\" values.\n */\nlet y = true,\n  n = false\n\nlet core = {\n  id: 'core',\n\n  flags: {\n    g: 'global', // note that this is not a real flag in some flavors, but a different method call\n    i: 'caseinsensitive',\n    m: 'multiline',\n    s: 'dotall',\n    u: 'unicode',\n    y: 'sticky',\n    x: 'extended',\n    U: 'ungreedy',\n  },\n\n  // reserved characters that need to be escaped:\n  escChars: '+*?^$\\\\.[]{}()|/'.split('').reduce((o, c) => {\n    o[c] = y\n    return o\n  }, {}),\n\n  // escape chars that are specifically not supported by the flavor:\n  badEscChars: n,\n\n  escCharCodes: {\n    '0': 0, // null\n    a: 7, // bell\n    t: 9, // tab\n    n: 10, // lf\n    v: 11, // vertical tab\n    f: 12, // form feed\n    r: 13, // cr\n    e: 27, // escape\n  },\n\n  escCharTypes: {\n    A: 'bos',\n    b: 'wordboundary',\n    B: 'notwordboundary',\n    d: 'digit',\n    D: 'notdigit',\n    G: 'prevmatchend',\n    h: 'hwhitespace',\n    H: 'nothwhitespace',\n    K: 'keepout',\n    N: 'notlinebreak',\n    R: 'linebreak',\n    s: 'whitespace',\n    S: 'notwhitespace',\n    v: 'vwhitespace',\n    V: 'notvwhitespace',\n    w: 'word',\n    W: 'notword',\n    X: 'unicodegrapheme',\n    Z: 'eos',\n    z: 'abseos',\n  },\n\n  charTypes: {\n    '.': 'dot',\n    '|': 'alt',\n    $: 'eof',\n    '^': 'bof',\n    '?': 'opt', // also: \"lazy\"\n    '+': 'plus', // also: \"possessive\"\n    '*': 'star',\n  },\n\n  unquantifiable: {\n    // all group/set open tokens are unquantifiable by default (ie. tokens with a .close value)\n    quant: y,\n    plus: y,\n    star: y,\n    opt: y,\n    lazy: y,\n    possessive: y,\n    eof: y,\n    bof: y,\n    eos: y,\n    abseos: y,\n    alt: y,\n    open: y,\n    mode: y,\n    comment: y, // TODO: this should actually be ignored by quantifiers.\n    condition: y,\n  },\n\n  unicodeScripts: {\n    // from: http://www.pcre.org/original/doc/html/pcrepattern.html\n    Arabic: y,\n    Armenian: y,\n    Avestan: y,\n    Balinese: y,\n    Bamum: y,\n    Bassa_Vah: y,\n    Batak: y,\n    Bengali: y,\n    Bopomofo: y,\n    Brahmi: y,\n    Braille: y,\n    Buginese: y,\n    Buhid: y,\n    Canadian_Aboriginal: y,\n    Carian: y,\n    Caucasian_Albanian: y,\n    Chakma: y,\n    Cham: y,\n    Cherokee: y,\n    Common: y,\n    Coptic: y,\n    Cuneiform: y,\n    Cypriot: y,\n    Cyrillic: y,\n    Deseret: y,\n    Devanagari: y,\n    Duployan: y,\n    Egyptian_Hieroglyphs: y,\n    Elbasan: y,\n    Ethiopic: y,\n    Georgian: y,\n    Glagolitic: y,\n    Gothic: y,\n    Grantha: y,\n    Greek: y,\n    Gujarati: y,\n    Gurmukhi: y,\n    Han: y,\n    Hangul: y,\n    Hanunoo: y,\n    Hebrew: y,\n    Hiragana: y,\n    Imperial_Aramaic: y,\n    Inherited: y,\n    Inscriptional_Pahlavi: y,\n    Inscriptional_Parthian: y,\n    Javanese: y,\n    Kaithi: y,\n    Kannada: y,\n    Katakana: y,\n    Kayah_Li: y,\n    Kharoshthi: y,\n    Khmer: y,\n    Khojki: y,\n    Khudawadi: y,\n    Lao: y,\n    Latin: y,\n    Lepcha: y,\n    Limbu: y,\n    Linear_A: y,\n    Linear_B: y,\n    Lisu: y,\n    Lycian: y,\n    Lydian: y,\n    Mahajani: y,\n    Malayalam: y,\n    Mandaic: y,\n    Manichaean: y,\n    Meetei_Mayek: y,\n    Mende_Kikakui: y,\n    Meroitic_Cursive: y,\n    Meroitic_Hieroglyphs: y,\n    Miao: y,\n    Modi: y,\n    Mongolian: y,\n    Mro: y,\n    Myanmar: y,\n    Nabataean: y,\n    New_Tai_Lue: y,\n    Nko: y,\n    Ogham: y,\n    Ol_Chiki: y,\n    Old_Italic: y,\n    Old_North_Arabian: y,\n    Old_Permic: y,\n    Old_Persian: y,\n    Old_South_Arabian: y,\n    Old_Turkic: y,\n    Oriya: y,\n    Osmanya: y,\n    Pahawh_Hmong: y,\n    Palmyrene: y,\n    Pau_Cin_Hau: y,\n    Phags_Pa: y,\n    Phoenician: y,\n    Psalter_Pahlavi: y,\n    Rejang: y,\n    Runic: y,\n    Samaritan: y,\n    Saurashtra: y,\n    Sharada: y,\n    Shavian: y,\n    Siddham: y,\n    Sinhala: y,\n    Sora_Sompeng: y,\n    Sundanese: y,\n    Syloti_Nagri: y,\n    Syriac: y,\n    Tagalog: y,\n    Tagbanwa: y,\n    Tai_Le: y,\n    Tai_Tham: y,\n    Tai_Viet: y,\n    Takri: y,\n    Tamil: y,\n    Telugu: y,\n    Thaana: y,\n    Thai: y,\n    Tibetan: y,\n    Tifinagh: y,\n    Tirhuta: y,\n    Ugaritic: y,\n    Vai: y,\n    Warang_Citi: y,\n    Yi: y,\n  },\n\n  unicodeCategories: {\n    // from: http://www.pcre.org/original/doc/html/pcrepattern.html\n    C: y, // Other\n    Cc: y, // Control\n    Cf: y, // Format\n    Cn: y, // Unassigned\n    Co: y, // Private use\n    Cs: y, // Surrogate\n    L: y, // Letter\n    'L&': y, // Any letter\n    Ll: y, // Lower case letter\n    Lm: y, // Modifier letter\n    Lo: y, // Other letter\n    Lt: y, // Title case letter\n    Lu: y, // Upper case letter\n    M: y, // Mark\n    Mc: y, // Spacing mark\n    Me: y, // Enclosing mark\n    Mn: y, // Non-spacing mark\n    N: y, // Number\n    Nd: y, // Decimal number\n    Nl: y, // Letter number\n    No: y, // Other number\n    P: y, // Punctuation\n    Pc: y, // Connector punctuation\n    Pd: y, // Dash punctuation\n    Pe: y, // Close punctuation\n    Pf: y, // Final punctuation\n    Pi: y, // Initial punctuation\n    Po: y, // Other punctuation\n    Ps: y, // Open punctuation\n    S: y, // Symbol\n    Sc: y, // Currency symbol\n    Sk: y, // Modifier symbol\n    Sm: y, // Mathematical symbol\n    So: y, // Other symbol\n    Z: y, // Separator\n    Zl: y, // Line separator\n    Zp: y, // Paragraph separator\n    Zs: y, // Space separator\n  },\n\n  posixCharClasses: {\n    // from: http://www.pcre.org/original/doc/html/pcrepattern.html\n    alnum: y, // letters and digits\n    alpha: y, // letters\n    ascii: y, // character codes 0 - 127\n    blank: y, // space or tab only\n    cntrl: y, // control characters\n    digit: y, // decimal digits (same as \\d)\n    graph: y, // printing characters, excluding space\n    lower: y, // lower case letters\n    print: y, // printing characters, including space\n    punct: y, // printing characters, excluding letters and digits and space\n    space: y, // white space (the same as \\s from PCRE 8.34)\n    upper: y, // upper case letters\n    word: y, // \"word\" characters (same as \\w)\n    xdigit: y, // hexadecimal digits\n  },\n\n  modes: {\n    i: 'caseinsensitive',\n    s: 'dotall',\n    m: 'multiline',\n    x: 'freespacing',\n    J: 'samename',\n    U: 'switchlazy',\n  },\n\n  tokens: {\n    // note that not all of these are actively used in the lexer, but are included for completeness.\n    open: y, // opening /\n    close: y, // closing /\n    char: y, // abc\n\n    // classes:\n    // also in escCharTypes and charTypes\n    set: y, // [a-z]\n    setnot: y, // [^a-z]\n    setclose: y, // ]\n    range: y, // [a-z]\n    unicodecat: y, // \\p{Ll} \\P{^Ll} \\pL\n    notunicodecat: y, // \\P{Ll} \\p{^Ll} \\PL\n    unicodescript: y, // \\p{Cherokee} \\P{^Cherokee}\n    notunicodescript: y, // \\P{Cherokee} \\p{^Cherokee}\n    posixcharclass: y, // [[:alpha:]]\n    // not in supported flavors:\t\"posixcollseq\": y, // [[.foo.]] // this is recognized by the lexer, currently returns \"notsupported\" error\n    // not in supported flavors:\t\"unicodeblock\": y, // \\p{InThai} \\p{IsThai} and NOT \\P\n    // not in supported flavors:\t\"subtract\": y, // [base-[subtract]]\n    // not in supported flavors:\t\"intersect\": y, // [base&&[intersect]]\n\n    // esc:\n    // also in escCharCodes and escCharTypes\n    escoctal: y, // \\11\n    escunicodeu: y, // \\uFFFF\n    escunicodeub: y, // \\u{00A9}\n    escunicodexb: y, // \\x{00A9}\n    escsequence: y, // \\Q...\\E\n    eschexadecimal: y, // \\xFF\n    esccontrolchar: y, // \\cA\n    escoctalo: y, // \\o{377} // resolved to escoctal in lexer, no docs required\n    escchar: y, // \\m (unrecognized escapes) // no reference documentation required\n\n    // group:\n    group: y, // (foo)\n    groupclose: y, // )\n    noncapgroup: y, // (?:foo)\n    namedgroup: y, // (?P<name>foo) (?<name>foo) (?'name'foo)\n    atomic: y, // (?>foo|bar)\n    define: y, // (?(DEFINE)foo)\n    branchreset: y, // (?|(a)|(b))\n\n    // lookaround:\n    poslookbehind: y, // (?<=foo)\n    neglookbehind: y, // (?<!foo)\n    poslookahead: y, // (?=foo)\n    neglookahead: y, // (?!foo)\n\n    // ref:\n    namedref: y, // \\k<name> \\k'name' \\k{name} (?P=name)  \\g{name}\n    numref: y, // \\1\n    extnumref: y, // \\g{-1} \\g{+1} \\g{1} \\g1 \\g-1\n    recursion: y, // (?R) (?0) \\g<0> \\g'0'\n    numsubroutine: y, // \\g<1> \\g'-1' (?1) (?-1)\n    namedsubroutine: y, // \\g<name> \\g'name' (?&name) (?P>name)\n\n    // quantifiers:\n    // also in specialChars\n    quant: y, // {1,2}\n    possessive: y, // ++\n    lazy: y, // ?\n\n    // special:\n    conditional: y, // (?(?=if)then|else)\n    condition: y, // (?=if) any lookaround\n    conditionalelse: y, // |\n    conditionalgroup: y, // (?(1)a|b) (?(-1)a|b) (?(name)a|b)\n    mode: y, // (?i-x) see modes above\n    comment: y, // (?#comment)\n\n    // meta:\n    matchanyset: y, // [\\s\\S]\n  },\n\n  substTokens: {\n    // named references aren't supported in JS or PCRE / PHP\n    subst_$esc: y, // $$\n    'subst_$&match': y, // $&\n    subst_$before: y, // $`\n    subst_$after: y, // $'\n    subst_$group: y, // $1 $99 // resolved to subst_group in lexer, no docs required\n    subst_$bgroup: y, // ${1} ${99} // resolved to subst_group in lexer, no docs required\n    subst_bsgroup: y, // \\1 \\99 // resolved to subst_group in lexer, no docs required\n    subst_group: y, // $1 \\1 \\{1} // combined in docs, not used by lexer\n    subst_0match: y, // $0 \\0 \\{0}\n\n    // this isn't a feature of the engine, but of RegExr:\n    subst_esc: y, // \\n \\r \\u1234\n  },\n\n  config: {\n    forwardref: y, // \\1(a)\n    nestedref: y, // (\\1a|b)+\n    ctrlcodeerr: y, // does \\c error? (vs decompose)\n    reftooctalalways: y, // does a single digit reference \\1 become an octal? (vs remain an unmatched ref)\n    substdecomposeref: y, // will a subst reference decompose? (ex. \\3 becomes \"\\\" & \"3\" if < 3 groups)\n    looseesc: y, // should unrecognized escape sequences match the character (ex. \\u could match \"u\") // disabled when `u` flag is set\n    unicodenegated: y, // \\p{^etc}\"\n    namedgroupalt: y, // if false, only support (?<name>foo)\n  },\n\n  docs: {\n    // for example:\n    //possessive: {desc: \"+This will be appended to the existing entry.\" },\n    //namedgroup: {tip: \"This will overwrite the existing entry.\" }\n  },\n}\n\nmodule.exports = core\n"]}