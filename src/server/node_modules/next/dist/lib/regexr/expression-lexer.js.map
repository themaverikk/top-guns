{"version":3,"sources":["../../../lib/regexr/expression-lexer.js"],"names":["profile","require","Utils","copy","Object","assign","SUPPORT_MAP_PROPS","flags","escCharTypes","charTypes","tokens","substTokens","ExpressionLexer","constructor","_profile","string","token","errors","captureGroups","namedGroups","_buildSupportMap","parse","str","_modes","capgroups","namedgroups","brgroups","branchResetGroups","groups","refs","i","l","length","o","c","charset","prev","prv","unquantifiable","closeIndex","lastIndexOf","modes","next","parseFlag","parseParen","close","depth","push","capture","addCaptureGroup","type","open","pop","error","id","parseSquareBracket","clss","possessive","related","min","max","substr","search","parseQuant","parseBackSlash","code","undefined","parseChar","x","test","ignore","group","curGroup","alt","curGroupNum","inGroupNum","validateRange","addJSWarnings","addError","matchRefs","_supportMap","map","props","n","_addToSupportMap","escCharCodes","esc","escChars","rev","warning","brgroup","num","name","getRef","relIndex","indexes","names","isNaN","sign","index","parseInt","dir","refToOctal","config","reftooctalalways","char","String","fromCharCode","mergeNext","parseEscChar","charCodeAt","ANCHOR_TYPES","match","posixcharclass","value","posixCharClasses","sub","s","isCond","behind","negative","condition","namedgroupalt","parseMode","val","namedref","parseRef","unicodecat","u","parseUnicode","escsequence","e","indexOf","escunicodeub","escunicodeu","escunicodexb","toUpperCase","ctrlcodeerr","escoctalo","badEscChars","escchar","isRef","not","unicodeScripts","unicodeCategories","unicodenegated","supModes","bad","on","off","replace","errmode","end","arr","substring","split","proxy","set","bof","eof","bos","eos","abseos","wordboundary","notwordboundary","prevmatchend","module","exports"],"mappings":"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","sourcesContent":["/*\nRegExr: Learn, Build, & Test RegEx\nCopyright (C) 2017  gskinner.com, inc.\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst profile = require('./profile')\n\nconst Utils = {\n  copy: Object.assign,\n}\n\nconst SUPPORT_MAP_PROPS = {\n  // 1 = reverse, 0 - normal\n  flags: 1,\n  // escape is handled separately\n  // escCharCodes is handled separately\n  escCharTypes: 1,\n  charTypes: 1,\n  // unquantifiables not included\n  // unicodeScripts not included\n  // unicodeCategories not included\n  // posixCharClasses not included\n  // modes not included\n  tokens: 0,\n  substTokens: 0,\n  // config not included\n  // docs not included\n}\n\nclass ExpressionLexer {\n  constructor() {\n    this._profile = profile\n    this.string = this.token = this.errors = this.captureGroups = this.namedGroups = null\n    this._buildSupportMap(this._profile)\n  }\n\n  parse(str) {\n    if (!this._profile) {\n      return null\n    }\n    if (str === this.string) {\n      return this.token\n    }\n\n    this.token = null\n    this._modes = {}\n    this.string = str\n    this.errors = []\n    let capgroups = (this.captureGroups = [])\n    let namedgroups = (this.namedGroups = {})\n    let brgroups = (this.branchResetGroups = [])\n    let groups = [],\n      refs = [],\n      i = 0,\n      l = str.length\n    let o,\n      c,\n      token,\n      charset = null\n    // previous is the previous token, prv is the previous \"active\" token (!ignore)\n    let prev = null,\n      prv = null\n    let profile = this._profile,\n      unquantifiable = profile.unquantifiable\n    let charTypes = profile.charTypes\n    let closeIndex = str.lastIndexOf('/')\n\n    for (let i = closeIndex + 1; i < l; i++) {\n      this._modes[str[i]] = true\n    }\n\n    while (i < l) {\n      c = str[i]\n\n      token = { i: i, l: 1, prev: prev, prv: prv, modes: this._modes }\n      if (prev) {\n        prev.next = token\n      } else {\n        this.token = token\n      }\n\n      if (i === 0 || i >= closeIndex) {\n        this.parseFlag(str, token)\n      } else if (c === '(' && !charset) {\n        this.parseParen(str, token)\n        if (token.close === null) {\n          token.depth = groups.length\n          groups.push(token)\n        }\n        if (token.capture) {\n          this.addCaptureGroup(token, groups)\n        }\n      } else if (c === ')' && !charset) {\n        token.type = 'groupclose'\n        if (groups.length) {\n          o = token.open = groups.pop()\n          o.close = token\n          if (o.type === 'branchreset') {\n            brgroups.pop()\n          }\n        } else {\n          token.error = { id: 'groupclose' }\n        }\n      } else if (c === '[') {\n        charset = this.parseSquareBracket(str, token, charset)\n      } else if (c === ']' && charset) {\n        token.type = 'setclose'\n        token.open = charset\n        charset.close = token\n        charset = null\n      } else if (\n        c === '+' &&\n        prv &&\n        prv.clss === 'quant' &&\n        profile.tokens.possessive\n      ) {\n        token.type = 'possessive'\n        token.related = [prv]\n      } else if ((c === '+' || c === '*') && !charset) {\n        token.type = charTypes[c]\n        token.clss = 'quant'\n        token.min = c === '+' ? 1 : 0\n        token.max = -1\n      } else if (\n        c === '{' &&\n        !charset &&\n        str.substr(i).search(/^{\\d+,?\\d*}/) !== -1\n      ) {\n        this.parseQuant(str, token)\n      } else if (c === '\\\\') {\n        this.parseBackSlash(str, token, charset, closeIndex)\n      } else if (c === '?' && !charset) {\n        if (!prv || prv.clss !== 'quant') {\n          token.type = charTypes[c]\n          token.clss = 'quant'\n          token.min = 0\n          token.max = 1\n        } else {\n          token.type = 'lazy'\n          token.related = [prv]\n        }\n      } else if (\n        c === '-' &&\n        charset &&\n        prv.code !== undefined &&\n        prv.prv &&\n        prv.prv.type !== 'range'\n      ) {\n        // this may be the start of a range, but we'll need to validate after the next token.\n        token.type = 'range'\n      } else {\n        this.parseChar(str, token, charset)\n        if (!charset && this._modes.x && /\\s/.test(c)) {\n          token.ignore = true\n          token.type = 'ignorews'\n        }\n      }\n\n      // post process token:\n      // quantifier:\n      if (token.clss === 'quant') {\n        if (\n          !prv ||\n          prv.close !== undefined ||\n          unquantifiable[prv.type] ||\n          (prv.open && unquantifiable[prv.open.type])\n        ) {\n          token.error = { id: 'quanttarg' }\n        } else {\n          token.related = [prv.open || prv]\n        }\n      }\n\n      // reference:\n      if (token.group === true) {\n        refs.push(token)\n      }\n\n      // conditional:\n      let curGroup = groups.length ? groups[groups.length - 1] : null\n      if (\n        curGroup &&\n        (curGroup.type === 'conditional' ||\n          curGroup.type === 'conditionalgroup') &&\n        token.type === 'alt'\n      ) {\n        if (!curGroup.alt) {\n          curGroup.alt = token\n        } else {\n          token.error = { id: 'extraelse' }\n        }\n        token.related = [curGroup]\n        token.type = 'conditionalelse'\n        token.clss = 'special'\n      } else if (curGroup && curGroup.type === 'branchreset') {\n        // reset group\n        curGroup.curGroupNum = curGroup.inGroupNum\n      }\n\n      // range:\n      if (prv && prv.type === 'range' && prv.l === 1) {\n        this.validateRange(str, token)\n      }\n\n      // js warnings:\n      // TODO: this isn't ideal, but I'm hesitant to write a more robust solution for a couple of edge cases.\n      if (profile.id === 'js') {\n        this.addJSWarnings(token)\n      }\n\n      // general:\n      if (token.open && !token.clss) {\n        token.clss = token.open.clss\n      }\n      if (token.error) {\n        this.addError(token)\n      }\n      i += token.l\n      prev = token\n      if (!token.ignore) {\n        prv = token\n      }\n    }\n\n    // post processing:\n    while (groups.length) {\n      this.addError(groups.pop(), { id: 'groupopen' })\n    }\n    this.matchRefs(refs, capgroups, namedgroups)\n    if (charset) {\n      this.addError(charset, { id: 'setopen' })\n    }\n\n    return this.token\n  }\n\n  _buildSupportMap(profile) {\n    if (profile._supportMap) {\n      return\n    }\n    let map = (profile._supportMap = {}),\n      props = SUPPORT_MAP_PROPS,\n      n\n    for (n in props) {\n      this._addToSupportMap(map, profile[n], !!props[n])\n    }\n    let o = profile.escCharCodes,\n      esc = profile.escChars\n    for (n in o) {\n      map['esc_' + o[n]] = true\n    }\n    for (n in esc) {\n      map['esc_' + esc[n]] = true\n    }\n  }\n\n  _addToSupportMap(map, o, rev) {\n    if (rev) {\n      for (let n in o) {\n        map[o[n]] = true\n      }\n    } else {\n      for (let n in o) {\n        map[n] = o[n]\n      }\n    }\n  }\n\n  addError(token, error = token.error) {\n    token.error = error\n    this.errors.push(token)\n  }\n\n  addJSWarnings(token) {\n    if (token.error) {\n      return\n    }\n    if (\n      token.type === 'neglookbehind' ||\n      token.type === 'poslookbehind' ||\n      token.type === 'sticky' ||\n      token.type === 'unicode' ||\n      token.type == 'dotall' ||\n      token.type === 'unicodecat' ||\n      token.type === 'unicodescript' ||\n      token.type === 'namedgroup'\n    ) {\n      token.error = { id: 'jsfuture', warning: true }\n    }\n  }\n\n  addCaptureGroup(token, groups) {\n    // it would be nice to make branch reset groups actually highlight all of the groups that share the same number\n    // that would require switching to arrays of groups for each group num - requires rearchitecture throughout the app.\n    let capgroups = this.captureGroups,\n      brgroups = this.branchResetGroups,\n      namedgroups = this.namedGroups\n    let curGroup = groups.length ? groups[groups.length - 1] : null\n    if (brgroups.length) {\n      let brgroup = brgroups[brgroups.length - 1]\n      token.num = ++brgroup.curGroupNum\n    } else {\n      token.num = capgroups.length + 1\n    }\n    if (!capgroups[token.num - 1]) {\n      capgroups.push(token)\n    }\n    if (token.name && !token.error) {\n      if (/\\d/.test(token.name[0])) {\n        token.error = { id: 'badname' }\n      } else if (namedgroups[token.name]) {\n        token.error = { id: 'dupname' }\n        token.related = [namedgroups[token.name]]\n      } else {\n        namedgroups[token.name] = token\n      }\n    }\n  }\n\n  getRef(token, str) {\n    token.clss = 'ref'\n    token.group = true\n    token.relIndex = this.captureGroups.length\n    token.name = str\n  }\n\n  matchRefs(refs, indexes, names) {\n    while (refs.length) {\n      let token = refs.pop(),\n        name = token.name,\n        group = names[name]\n\n      if (!group && !isNaN(name)) {\n        let sign = name[0],\n          index =\n            parseInt(name) + (sign === '+' || sign === '-' ? token.relIndex : 0)\n        if (sign === '-') {\n          index++\n        }\n        group = indexes[index - 1]\n      }\n      if (group) {\n        token.group = group\n        token.related = [group]\n        token.dir =\n          token.i < group.i\n            ? 1\n            : !group.close || token.i < group.close.i\n            ? 0\n            : -1\n      } else {\n        delete token.group\n        delete token.relIndex\n        this.refToOctal(token)\n        if (token.error) {\n          this.errors.push(token.error)\n        }\n      }\n    }\n  }\n\n  refToOctal(token) {\n    // PCRE: \\# unmatched, \\0 \\00 \\## = octal\n    // JS: \\# \\0 \\00 \\## = octal\n    // PCRE matches \\8 \\9 to \"8\" \"9\"\n    // JS: without the u flag \\8 \\9 match \"8\" \"9\" in IE, FF & Chrome, and \"\\8\" \"\\9\" in Safari. We support the former.\n    // JS: with the u flag, Chrome & FF throw an esc error, Safari does not.\n\n    // TODO: handle \\0 for PCRE? Would need more testing.\n    // TODO: this doesn't handle two digit refs with 8/9 in them. Ex. \\18 - not even sure what this is interpreted as.\n    let name = token.name,\n      profile = this._profile\n    if (token.type !== 'numref') {\n      // not a simple \\4 style reference, so can't decompose into an octal.\n      token.error = { id: 'unmatchedref' }\n    } else if (\n      /^[0-7]{2}$/.test(name) ||\n      (profile.config.reftooctalalways && /^[0-7]$/.test(name))\n    ) {\n      // octal\n      let next = token.next,\n        char = String.fromCharCode(next.code)\n      if (\n        next.type === 'char' &&\n        char >= '0' &&\n        char <= '7' &&\n        parseInt(name + char, 8) <= 255\n      ) {\n        name += char\n        this.mergeNext(token)\n      }\n      token.code = parseInt(name, 8)\n      token.clss = 'esc'\n      token.type = 'escoctal'\n      delete token.name\n    } else if (name === '8' || name === '9') {\n      this.parseEscChar(token, name)\n      delete token.name\n    } else {\n      token.error = { id: 'unmatchedref' }\n    }\n  }\n\n  mergeNext(token) {\n    let next = token.next\n    token.next = next.next\n    token.next.prev = token\n    token.l++\n  }\n\n  parseFlag(str, token) {\n    // note that this doesn't deal with misformed patterns or incorrect flags.\n    let i = token.i,\n      c = str[i]\n    if (str[i] === '/') {\n      token.type = i === 0 ? 'open' : 'close'\n      if (i !== 0) {\n        token.related = [this.token]\n        this.token.related = [token]\n      }\n    } else {\n      token.type = this._profile.flags[c]\n    }\n    //token.clear = true;\n  }\n\n  parseChar(str, token, charset) {\n    let c = str[token.i]\n    token.type = (!charset && this._profile.charTypes[c]) || 'char'\n    if (!charset && c === '/') {\n      token.error = { id: 'fwdslash' }\n    }\n    if (token.type === 'char') {\n      token.code = c.charCodeAt(0)\n    } else if (ExpressionLexer.ANCHOR_TYPES[token.type]) {\n      token.clss = 'anchor'\n    } else if (token.type === 'dot') {\n      token.clss = 'charclass'\n    }\n    return token\n  }\n\n  parseSquareBracket(str, token, charset) {\n    let match\n    if (\n      this._profile.tokens.posixcharclass &&\n      (match = str.substr(token.i).match(/^\\[(:|\\.)([^\\]]*?)\\1]/))\n    ) {\n      // posixcharclass: [:alpha:]\n      // posixcollseq: [.ch.]\n      // currently neither flavor supports posixcollseq, but PCRE does flag as an error:\n      // TODO: the expression above currently does not catch [.\\].]\n      token.l = match[0].length\n      token.value = match[2]\n      token.clss = 'charclass'\n      if (match[1] === ':') {\n        token.type = 'posixcharclass'\n        if (!this._profile.posixCharClasses[match[2]]) {\n          token.error = { id: 'posixcharclassbad' }\n        } else if (!charset) {\n          token.error = { id: 'posixcharclassnoset' }\n        }\n      } else {\n        token.type = 'posixcollseq'\n        // TODO: can this be generalized? Right now, no, because we assign ids that aren't in the profile.\n        token.error = { id: 'notsupported' }\n      }\n    } else if (!charset) {\n      // set [a-z] [aeiou]\n      // setnot [^a-z]\n      token.type = token.clss = 'set'\n      if (str[token.i + 1] === '^') {\n        token.l++\n        token.type += 'not'\n      }\n      charset = token\n    } else {\n      // [[] (square bracket inside a set)\n      this.parseChar(str, token, charset)\n    }\n    return charset\n  }\n\n  parseParen(str, token) {\n    /*\n\t\tcore:\n\t.\t\tgroup:\n\t.\t\tlookahead: ?= ?!\n\t.\t\tnoncap: ?:\n\t\tPCRE:\n\t.\t\tlookbehind: ?<= ?<!\n\t.\t\tnamed: ?P<name> ?'name' ?<name>\n\t.\t\tnamedref: ?P=name\t\tAlso: \\g'name' \\k'name' etc\n\t.\t\tcomment: ?#\n\t.\t\tatomic: ?>\n\t.\t\trecursion: ?0 ?R\t\tAlso: \\g<0>\n\t.\t\tdefine: ?(DEFINE)\n\t.\t\tsubroutine: ?1 ?-1 ?&name ?P>name\n\t\t\tconditionalgroup: ?(1)a|b ?(-1)a|b ?(name)a|b\n\t\t\tconditional: ?(?=if)then|else\n\t\t\tmode: ?c-i\n\t\t\tbranchreset: ?|\n\t\t*/\n\n    token.clss = token.type = 'group'\n    if (str[token.i + 1] !== '?') {\n      token.close = null // indicates that it needs a close token.\n      token.capture = true\n      return token\n    }\n\n    let sub = str.substr(token.i + 2),\n      match,\n      s = sub[0]\n\n    if (s === ':') {\n      // (?:foo)\n      token.type = 'noncapgroup'\n      token.close = null\n      token.l = 3\n    } else if (s === '>') {\n      // (?>foo)\n      token.type = 'atomic'\n      token.close = null\n      token.l = 3\n    } else if (s === '|') {\n      // (?|(a)|(b))\n      token.type = 'branchreset'\n      token.close = null\n      token.l = 3\n      token.inGroupNum = token.curGroupNum = this.captureGroups.length\n      this.branchResetGroups.push(token)\n    } else if (s === '#' && (match = sub.match(/[^)]*\\)/))) {\n      // (?#foo)\n      token.clss = token.type = 'comment'\n      token.ignore = true\n      token.l = 2 + match[0].length\n    } else if (/^(R|0)\\)/.test(sub)) {\n      // (?R) (?0)\n      token.clss = 'ref'\n      token.type = 'recursion'\n      token.l = 4\n    } else if ((match = sub.match(/^P=(\\w+)\\)/i))) {\n      // (?P=name)\n      token.type = 'namedref'\n      this.getRef(token, match[1])\n      token.l = match[0].length + 2\n    } else if (/^\\(DEFINE\\)/.test(sub)) {\n      // (?(DEFINE)foo)\n      token.type = 'define'\n      token.close = null\n      token.l = 10\n    } else if ((match = sub.match(/^<?[=!]/))) {\n      // (?=foo) (?<!foo)\n      let isCond = token.prv.type === 'conditional'\n      token.clss = isCond ? 'special' : 'lookaround'\n      token.close = null\n      s = match[0]\n      token.behind = s[0] === '<'\n      token.negative = s[+token.behind] === '!'\n      token.type = isCond\n        ? 'condition'\n        : (token.negative ? 'neg' : 'pos') +\n          'look' +\n          (token.behind ? 'behind' : 'ahead')\n      if (isCond) {\n        token.prv.related = [token]\n        token.prv.condition = token\n        token.related = [token.prv]\n      }\n      token.l = s.length + 2\n    } else if (\n      (match = sub.match(/^<(\\w+)>/)) ||\n      (this._profile.config.namedgroupalt &&\n        ((match = sub.match(/^'(\\w+)'/)) || (match = sub.match(/^P<(\\w+)>/))))\n    ) {\n      // (?<name>foo) (?'name'foo) (?P<name>foo)\n      token.type = 'namedgroup'\n      token.close = null\n      token.name = match[1]\n      token.capture = true\n      token.l = match[0].length + 2\n    } else if (\n      (match = sub.match(/^([-+]?\\d\\d?)\\)/)) ||\n      (match = sub.match(/^(?:&|P>)(\\w+)\\)/))\n    ) {\n      // (?1) (?-1) (?&name) (?P>name)\n      token.type = (isNaN(match[1]) ? 'named' : 'num') + 'subroutine'\n      this.getRef(token, match[1])\n      token.l = match[0].length + 2\n    } else if (\n      (match = sub.match(/^\\(([-+]?\\d\\d?)\\)/)) ||\n      (match = sub.match(/^\\((\\w+)\\)/))\n    ) {\n      // (?(1)a|b) (?(-1)a|b) (?(name)a|b)\n      this.getRef(token, match[1])\n      token.clss = 'special'\n      token.type = 'conditionalgroup'\n      token.close = null\n      token.l = match[0].length + 2\n    } else if (/^\\(\\?<?[=!]/.test(sub)) {\n      // (?(?=if)then|else)\n      token.clss = 'special'\n      token.type = 'conditional'\n      token.close = null\n      token.l = 2\n    } else if (this.parseMode(token, sub)) {\n      // (?i-x)\n      // do nothing. handled by parseMode.\n    } else {\n      // error, found a (? without matching anything. Treat it as a normal group and let it error out.\n      token.close = null\n      token.capture = true\n    }\n\n    if (!this._profile.tokens[token.type]) {\n      token.error = { id: 'notsupported' }\n    }\n\n    return token\n  }\n\n  parseBackSlash(str, token, charset, closeIndex) {\n    // Note: Chrome does weird things with \\x & \\u depending on a number of factors, we ignore this.\n    let i = token.i,\n      match,\n      profile = this._profile\n    let sub = str.substr(i + 1),\n      c = sub[0],\n      val\n    if (i + 1 === (closeIndex || str.length)) {\n      token.error = { id: 'esccharopen' }\n      return\n    }\n\n    if (!charset && (match = sub.match(/^\\d\\d?/))) {\n      // \\1 to \\99\n      // write this as a reference for now, and re-write it later if it doesn't match a group\n      token.type = 'numref'\n      this.getRef(token, match[0])\n      token.l += match[0].length\n      return token\n    }\n    if (profile.tokens.namedref && !charset && (c === 'g' || c === 'k')) {\n      return this.parseRef(token, sub)\n    }\n\n    if (\n      profile.tokens.unicodecat &&\n      (!profile.flags.u || this._modes.u) &&\n      (c === 'p' || c === 'P')\n    ) {\n      // unicode: \\p{Ll} \\pL\n      return this.parseUnicode(token, sub)\n    } else if (profile.tokens.escsequence && c === 'Q') {\n      // escsequence: \\Q...\\E\n      token.type = 'escsequence'\n      let e = 2\n      if ((i = sub.indexOf('\\\\E')) !== -1) {\n        token.l += i + 2\n        e += 2\n      } else {\n        token.l += closeIndex - token.i - 1\n      }\n      token.value = str.substr(token.i + 2, token.l - e)\n    } else if (\n      profile.tokens.escunicodeub &&\n      this._modes.u &&\n      (match = sub.match(/^u\\{(\\d+)}/))\n    ) {\n      // unicodeu: \\u{0061}\n      token.type = 'escunicodeub'\n      token.l += match[0].length\n      token.code = parseInt(match[1], 16)\n    } else if (\n      profile.tokens.escunicodeu &&\n      (match = sub.match(/^u([\\da-fA-F]{4})/))\n    ) {\n      // unicode: \\uFFFF\n      // update SubstLexer if this changes:\n      token.type = 'escunicodeu'\n      token.l += match[0].length\n      token.code = parseInt(match[1], 16)\n    } else if (\n      profile.tokens.escunicodexb &&\n      (match = sub.match(/^x\\{(.*?)}/))\n    ) {\n      // unicode: \\x{FFFF}\n      token.type = 'escunicodexb'\n      token.l += match[0].length\n      val = parseInt(match[1], 16)\n      // PCRE errors on more than 2 digits (>255). In theory it should allow 4?\n      if (isNaN(val) || val > 255 || /[^\\da-f]/i.test(match[1])) {\n        token.error = { id: 'esccharbad' }\n      } else {\n        token.code = val\n      }\n    } else if ((match = sub.match(/^x([\\da-fA-F]{0,2})/))) {\n      // hex ascii: \\xFF\n      token.type = 'eschexadecimal'\n      token.l += match[0].length\n      token.code = parseInt(match[1] || 0, 16)\n    } else if ((match = sub.match(/^c([a-zA-Z])?/))) {\n      // control char: \\cA \\cz\n      // also handles: \\c\n      // not supported in JS strings\n      token.type = 'esccontrolchar'\n      if (match[1]) {\n        token.code = match[1].toUpperCase().charCodeAt(0) - 64 // A=65\n        token.l += 2\n      } else if (profile.config.ctrlcodeerr) {\n        token.l++\n        token.error = { id: 'esccharbad' }\n      } else {\n        return this.parseChar(str, token, charset) // this builds the \"/\" token\n      }\n    } else if ((match = sub.match(/^[0-7]{1,3}/))) {\n      // octal ascii: \\011\n      token.type = 'escoctal'\n      sub = match[0]\n      if (parseInt(sub, 8) > 255) {\n        sub = sub.substr(0, 2)\n      }\n      token.l += sub.length\n      token.code = parseInt(sub, 8)\n    } else if (profile.tokens.escoctalo && (match = sub.match(/^o\\{(.*?)}/i))) {\n      // \\o{377}\n      token.type = 'escoctal'\n      token.l += match[0].length\n      val = parseInt(match[1], 8)\n      if (isNaN(val) || val > 255 || /[^0-7]/.test(match[1])) {\n        token.error = { id: 'esccharbad' }\n      } else {\n        token.code = val\n      }\n    } else {\n      // single char\n      if ((token.type = profile.escCharTypes[c])) {\n        token.l++\n        token.clss = ExpressionLexer.ANCHOR_TYPES[token.type]\n          ? 'anchor'\n          : 'charclass'\n        return token\n      }\n\n      token.code = profile.escCharCodes[c]\n      if (token.code === undefined || token.code === false) {\n        // unrecognized.\n        return this.parseEscChar(token, c)\n      }\n\n      // update SubstLexer if this changes:\n      token.l++\n      token.type = 'esc_' + token.code\n    }\n    token.clss = 'esc'\n    return token\n  }\n\n  parseEscChar(token, c) {\n    // unrecognized escchar: \\u \\a \\8, etc\n    // JS: allowed except if u flag set, Safari still allows \\8 \\9\n    // PCRE: allows \\8 \\9 but not others // TODO: support?\n    let profile = this._profile\n    token.l = 2\n    if (\n      (!profile.badEscChars[c] && profile.tokens.escchar && !this._modes.u) ||\n      profile.escChars[c]\n    ) {\n      token.type = 'escchar'\n      token.code = c.charCodeAt(0)\n      token.clss = 'esc'\n    } else {\n      token.error = { id: 'esccharbad' }\n    }\n  }\n\n  parseRef(token, sub) {\n    // namedref: \\k<name> \\k'name' \\k{name} \\g{name}\n    // namedsubroutine: \\g<name> \\g'name'\n    // numref: \\g1 \\g+2 \\g{2}\n    // numsubroutine: \\g<-1> \\g'1'\n    // recursion: \\g<0> \\g'0'\n    let c = sub[0],\n      s = '',\n      match\n    if ((match = sub.match(/^[gk](?:'\\w*'|<\\w*>|{\\w*})/))) {\n      s = match[0].substr(2, match[0].length - 3)\n      if (c === 'k' && !isNaN(s)) {\n        s = ''\n      } // TODO: specific error for numeric \\k?\n    } else if (\n      (match = sub.match(/^g(?:({[-+]?\\d+}|<[-+]?\\d+>|'[-+]?\\d+')|([-+]?\\d+))/))\n    ) {\n      s =\n        match[2] !== undefined\n          ? match[2]\n          : match[1].substr(1, match[1].length - 2)\n    }\n    let isRef = c === 'k' || !(sub[1] === \"'\" || sub[1] === '<')\n    if (!isRef && s == 0) {\n      token.type = 'recursion'\n      token.clss = 'ref'\n    } else {\n      // namedref, extnumref, namedsubroutine, numsubroutine\n      token.type =\n        (isNaN(s) ? 'named' : (isRef ? 'ext' : '') + 'num') +\n        (isRef ? 'ref' : 'subroutine')\n      this.getRef(token, s)\n    }\n    token.l += match ? match[0].length : 1\n  }\n\n  parseUnicode(token, sub) {\n    // unicodescript: \\p{Cherokee}\n    // unicodecat: \\p{Ll} \\pL\n    // not: \\P{Ll} \\p{^Lu}\n    let match = sub.match(/p\\{\\^?([^}]*)}/i),\n      val = match && match[1],\n      not = sub[0] === 'P'\n    if (!match && (match = sub.match(/[pP]([LMZSNPC])/))) {\n      val = match[1]\n    } else {\n      not = not !== (sub[2] === '^')\n    }\n    token.l += match ? match[0].length : 1\n    token.type = 'unicodecat'\n    if (this._profile.unicodeScripts[val]) {\n      token.type = 'unicodescript'\n    } else if (!this._profile.unicodeCategories[val]) {\n      val = null\n    }\n    if (not) {\n      token.type = 'not' + token.type\n    }\n    if ((!this._profile.config.unicodenegated && sub[2] === '^') || !val) {\n      token.error = { id: 'unicodebad' }\n    }\n    token.value = val\n    token.clss = 'charclass'\n    return token\n  }\n\n  parseMode(token, sub) {\n    // (?i-x)\n    // supported modes in PCRE: i-caseinsens, x-freespacing, s-dotall, m-multiline, U-switchlazy, [J-samename]\n    let match = sub.match(/^[-a-z]+\\)/i)\n    if (!match) {\n      return\n    }\n    let supModes = this._profile.modes\n    let modes = Utils.copy({}, this._modes),\n      bad = false,\n      not = false,\n      s = match[0],\n      c\n    token.on = token.off = ''\n\n    for (let i = 0, l = s.length - 1; i < l; i++) {\n      c = s[i]\n      if (c === '-') {\n        not = true\n        continue\n      }\n      if (!supModes[c]) {\n        bad = true\n        break\n      }\n      modes[c] = !not\n\n      token.on = token.on.replace(c, '')\n      if (not) {\n        token.off = token.off.replace(c, '')\n        token.off += c\n      } else {\n        token.on += c\n      }\n    }\n\n    token.clss = 'special'\n    token.type = 'mode'\n    token.l = match[0].length + 2\n\n    if (bad) {\n      token.error = { id: 'modebad' }\n      token.errmode = c\n    } else {\n      this._modes = modes\n    }\n    return token\n  }\n\n  parseQuant(str, token) {\n    // quantifier: {0,3} {3} {1,}\n    token.type = token.clss = 'quant'\n    let i = token.i\n    let end = str.indexOf('}', i + 1)\n    token.l += end - i\n    let arr = str.substring(i + 1, end).split(',')\n    token.min = parseInt(arr[0])\n    token.max =\n      arr[1] === undefined ? token.min : arr[1] === '' ? -1 : parseInt(arr[1])\n    if (token.max !== -1 && token.min > token.max) {\n      token.error = { id: 'quantrev' }\n    }\n    return token\n  }\n\n  validateRange(str, end) {\n    // char range: [a-z] [\\11-\\n]\n    let next = end,\n      token = end.prv,\n      prv = token.prv\n    if (prv.code === undefined || next.code === undefined) {\n      // not a range, rewrite as a char:\n      this.parseChar(str, token)\n    } else {\n      token.clss = 'set'\n      if (prv.code > next.code) {\n        // this gets added here because parse has already moved to the next token:\n        this.errors.push((token.error = { id: 'rangerev' }))\n      }\n      // preserve as separate tokens, but treat as one in the UI:\n      next.proxy = prv.proxy = token\n      token.set = [prv, token, next]\n    }\n  }\n}\n\nExpressionLexer.ANCHOR_TYPES = {\n  bof: true,\n  eof: true,\n  bos: true,\n  eos: true,\n  abseos: true,\n  wordboundary: true,\n  notwordboundary: true,\n  prevmatchend: true,\n}\n\nmodule.exports = ExpressionLexer\n"]}